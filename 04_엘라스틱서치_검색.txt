# 쿼리 컨텍스트(query context)
# 쿼리 컨텍스트는 질의에 대한 유사도를 계산해 이를 기준으로 더 정확한 결과를 먼저 보여준다.
# 도큐먼트에서 "엘라스틱"이 포함되어 있는지 찾을 때 사용한다.

# _search는 검색 쿼리를 위해 엘라스틱 서치에서 제공하는 REST API이다.
# 전체 보기
GET kibana_sample_data_ecommerce/_search
# 쿼리를 사용해서(조건 설정) 보기
# match는 전문 검색을 위한 쿼리로, 역인덱싱 된 용어를 검색할 때 사용한다.
# kibana_sample_data_ecommerce 인덱스에 있는 category 필드의 역인덱스 테이블에 
# "clothing"라는 용어가 있는 모든 도큐먼트를 찾는 요청이다.
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "category": "clothing"
    }
  }
}

# 필터 컨텍스트(filter context)
# 필터 컨텍스트는 질의에 대한 유사도를 계산하지 않고 일치 여부에 따른 결과만 반환한다.
# 도큐먼트 제목이 정확히 "엘라스틱"인 문서를 찾을 때 사용한다.

# bool은 논리 쿼리로 내부의 filter 타입에 적용된다.
# kibana_sample_data_ecommerce 인덱스에 있는 day_of_week 필드에 저장된 값이 정확히 "Friday"인 모든 도큐먼트를 찾는 요청이다.
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "day_of_week": "Friday"
          }
        }
      ]
    }
  }
}

# 쿼리 스트링
# REST API의 주소에 쿼리문을 작성하는 방법으로 단순한 조건일 경우 사용하기 쉽다.
# 쿼리를 1줄로 만들어야 하기 때문에 조건이 복잡해지면 가독성이 떨어지고 오류를 범하기 쉽다.
# => 간단 쿼리에 사용해야 한다.

GET kibana_sample_data_ecommerce/_search?q=customer_full_name:Mary

# 쿼리 DSL(Domain Specific Language)
# 쿼리 DSL은 REST API의 요청 본문({} 블록) 내부에 JSON 형태로 쿼리를 작성한다.
# 엘라스틱 서치의 모든 쿼리 스펙을 지원하기 때문에 매우 강력하며 복잡한 쿼리를 구현할 수 있다는 장점이 있다. => 복잡한 쿼리에 사용한다.

GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "customer_full_name": "Mary"
    }
  }
}

# 유사도 스코어
# 쿼리 컨텍스트에서는 엘라스틱 서치가 지원하는 다양한 스코어 알고리즘을 사용할 수 있는데 기본적으로 BM25 알고리즘을 이용해 유사도 스코어를 계산한다.
# 유사도 스코어는 질의문과 도큐먼트의 유사도를 표현하는 값으로, 스코어가 높을수록 찾고자 하는 도큐먼트에 가깝다는 사실을 의미한다.
#   "explain": true을 추가하면 쿼리 내부적인 최적화 방법과 어떤 경로를 통해 검색되었으며 어떤 기준으로 스코어가 계산되었는지 알 수 있다.

GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "products.product_name": "Pants"
    }
  },
  "explain": true
}

# 엘라스틱 서치는 검색을 위해 쿼리를 지원한다.
# 리프 쿼리(leaf query)는 특정 필드에서 용어를 찾는 쿼리, match, term, range
# 복합 쿼리(compound query)는 쿼리를 조합해서 사용하는 쿼리, bool

# 전문 쿼리
# 전문 쿼리는 전문 검색을 하기 위해 사용되며 전문 검색을 할 필드는 인덱스 매핑 시 text 타입으로 매핑해야 한다.
# 일반적으로 블로그처럼 텍스트가 많은 필드에서 특정 용어를 검색할 때 사용한다.

# 용어 수준 쿼리
# 용어 쿼리는 정확히 일치하는 용어를 찾기 위해 사용되며, 인덱스 매핑 시 keyword 타입으로 매핑해야 한다.
# 전문 쿼리와는 다르게 정확한 용어를 검색할 때 사용한다. (예> where 조건절)

# match query 
# 전문 쿼리의 가장 기본이 되는 쿼리로, 전체 텍스트 중에서 특정 용어를 검색할 때 사용한다.
# 필드명을 모르면 쿼리를 진행할 수 없으므로 필드명을 모를 경우 
# GET kibana_sample_data_ecommerce/_mapping을 실행해서 인덱스에 포함된 필드가 어떤 것들이 있는지 확인해야 한다.

# 하나의 용어를 검색하는 match query
# _source 파라미터를 생략하거나 []만 사용하면 모든 필드를 다 보여주지만 [] 내부에 필드 이름을 적어주면 적어준 필드만 검색한다.
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "customer_full_name": "Mary"
    }
  },
  "_source": ["customer_full_name", "customer_gender"]
}

# 복수 개의 용어를 검색하는 match query 
# 복수 개의 용어를 검색하려면 검색어를 띄어쓰기를 경계로 나열하면 된다.
# 이때, 띄어쓰기는 OR로 인식한다.
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "customer_full_name": "Mary Byrd"
    },
    "_source": ["customer_full_name", "customer_gender"]
  }
}

# "mary"와 "byrd"를 모두 포함하는 도큐먼트를 찾아보자 =>  and 조건!
# 검색어를 공백으로만 구분하면 OR로 인식하므로 AND를 사용하고 싶다면 필드명에 {}를 이용해서 검색어(query)와 연산자(operator)를 지정해야 한다.
# "operator"는 OR가 기본값이기 때문에 아예 작성하지 않으면 OR로 인식한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "customer_gender"],
  "query": {
    "match": {
      "customer_full_name": {
        "query": "byrd mary",
        "operator": "and"
      }
    }
  }
}

# match_phrase query
# match 쿼리와 마찬가지로 전문 쿼리의 한 종류로 구절(phrase)을 검색할 때 사용한다.
# 구절은 2개 이상의 단어가 연결되어 만들어지는 단어이다.
# "빨강색", "바지"와 같이 단어를 검색하는 쿼리가 match 쿼리라면 "빨강색 바지", "80인치 텔레비전"과 같이 여러 단어가 모여서 생성된 구절을 검색하는 쿼리가 match phrase 쿼리이다.
# "빨강색 바지"를 검색한다는 것은 "바지 빨강색"을 검색하려는 것이 아니므로 검색하려는 모든 단어가 있어야 하며 단어 순서도 중요하다.
# mary byrd는 되고 byrd mary는 안된다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name"],
  "query": {
    "match_phrase": {
      "customer_full_name": "mary byrd"
    }
  }
}

GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "customer_full_name": "byrd mary"
    },
    "_source": ["customer_full_name", "customer_gender"]
  }
}

# --------------------------------------------------------------------------------------------
# term query
# term(용어) 쿼리는 용어 수준 쿼리의 대표적인 쿼리로 형식은 match 쿼리와 비슷하지만 큰 차이점이 있다.
# match 쿼리는 분석기에 의해 검색어가 토큰화되고 대소문자를 구분하지만 term 쿼리는 분석기에 의해 검색어가 토큰화되지 않고 대소문자도 구분하지 않는 차이점이 있다.

GET kibana_sample_data_ecommerce/_mapping

# text 타입 필드에 대한 term 쿼리
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name"], 
  "query": {
    "term": {
      "customer_full_name": {
        "value": "Diane Chandler"
      }
    }
  }
}
# 위와 같이 쿼리를 실행하면 1개도 검색하지 않는다. 
# customer_full_name 필드는 text 타입으로 설정된 필드이므로 match, match_phrase 쿼리는 사용할 수 있지만 term 쿼리는 사용할 수 없다.
# (어떤 타입인지 보고 싶으면 GET kibana_sample_data_ecommerce/_mapping을 실행하면 된다.)
# text 타입으로 설정된 필드는 keyword 타입으로 검색해야 나온다!
# -------------------------------------------------------------------------------------------

# keyword 타입 필드에 대한 term 쿼리
# customer_full_name 필드는 멀티 필드로 설정되어 있고 fields 파라미터에 keyword라는 이름으로 keyword 속성을 설정했다.
# 용어 수준 쿼리는 대소문자를 구분하기 때문에 "diane chandler"라고 치면 안 나온다.
# 검색어의 대소문자도 신경 써서 검색해야 나온다.

GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name"], 
  "query": {
    "term": {
      "customer_full_name.keyword": {
        "value": "Diane Chandler"
      }
    }
  }
}
# --------------------------------------------------------------------------------------
# 필드명의 {} 블록에는 value 파라미터만 들어가기 때문에 생략해도 무관하다. (위의 쿼리와 똑같다는 말)
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name"], 
  "query": {
    "term": {
      "customer_full_name.keyword": "Diane Chandler"
    }
  }
}

# terms query
# terms 쿼리는 용어 수준 쿼리의 일종이며 여러 용어들을 검색한다.
# keyword 타입으로 매핑된 필드에서 사용해야 하며, 분석기를 거치지 않기 때문에 대소문자도 신경써야 한다.
# term 쿼리를 사용할 때는 검색할 용어를 그냥 쓰면 되지만 terms 쿼리는 여러 개의 용어들을 검색해야 하므로 반드시 []에 묶어서 써야 한다.
# 즉, term 쿼리는 하나의 용어만 검색할 수 있고, terms 쿼리는 두 개 이상의 쿼리를 검색할 수 있지만 반드시 []로 묶어서 적어야 한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["day_of_week", "day_of_week_i"],
  "query": {
    "terms": {
      "day_of_week": ["Monday", "Friday"]
    }
  }
}

# multi match query
# multi match query는 전문 검색의 일종이므로 text 타입으로 매핑된 필드에서 사용한다.
# match, match_phrase, term, terms 쿼리는 검색할 필드 이름을 정확히 알고 있을 때 사용하지만
# 검색하려는 용어나 구절이 정확히 어떤 필드에 있는지 모르는 경우에는 multi match query를 사용한다
# 즉 multi match query는 단일 필드에서만 검색을 하지 않고 여러 개의 필드에서 검색이 가능하다.

# query 파라미터에 검색하려는 내용을 입력한다.
# fields 파라미터의 [] 내부에 검색어로 입력한 내용이 있을 것으로 예상되는 필드 목록을 나열한다.
# []만 입력하고 필드 목록을 작성하지 않으면 전체 필드에서 검색한다.
# fields 파라미터에 []를 사용하지 않고 필드 이름을 1개만 적어도 실행이 되는데 에러가 발생되지 않고 실행되는 이유는 와일드카드 문자를 사용해서 검색어로 입력한 내용이 있을 것으로 예상되는 필드명을 지정할 수 있기 때문이다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name", "customer_full_name", "customer_last_name"],
  "query": {
    "multi_match": {
      "query": "underwood",
      "fields": ["customer_first_name", "customer_full_name", "customer_last_name"]
    }
  }
}

# 와일드 카드를 이용한 multi match 쿼리
# "_source" 파라미터에도 와일드 카드를 사용해서 얻어오려는 필드를 지정할 수 있다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": "customer_*_name",
  "query": {
    "multi_match": {
      "query": "mary",
      "fields": "customer_*_name"
    }
  }
}

# 검색어가 있을 것으로 예상되는 필드에 가중치를 부여할 수 있다.
# 특정 필드에 가중치를 부여하는 방법을 부스팅(boosting) 기법이라고 한다.
# 블로그에서 "엘라스틱"이라고 검색을 했을 때 용어가 본문에 있는 경우가 있고, 제목에 있는 경우가 있다.
# 일반적으로 제목에 "엘라스틱" 이라는 용어가 있는 도큐먼트가 더 중요할 가능성이 높기 때문에 이럴 경우 제목 필드에 가중치를 준다.
# 가중치는 가중치를 부여하려는 필드 뒤에 "^"기호와 가중치를 적어주면 된다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": "customer_*_name",
  "query": {
    "multi_match": {
      "query": "underwood",
      "fields": ["customer_first_name", "customer_full_name^2", "customer_last_name"]
    }
  }
}

# -----------------------------------------------------------------------------------

GET kibana_sample_data_flights/_mapping

# range(범위) query
# 특정 날짜나 숫자의 범위를 지정해 범위 안에 포함된 데이터들을 검색할 때 사용한다.
# 날짜, 숫자, ip 주소 타입의 데이터에 range 쿼리가 사용 가능하고 문자열 타입의 데이터에는 range 쿼리를 사용할 수 없다.
# 범위 지정에 사용되는 파라미터(연산자)
# => gte(크거나 같다), gt(크다). lte(작거나 같다), lt(작다)

GET kibana_sample_data_flights/_search
{
  "_source": ["timestamp"],
  "query": {
    "range": {
      "timestamp": {
        "gte": "2023-10-27",
        "lt": "2023-10-28"
      }
    }
  }
}

# 날짜/시간 검색은 보통 현재 시간을 기준으로 하는 경우가 많기 때문에 현재 시간을 기준으로 범위를 지정한다.
# now: 현재 시각
GET kibana_sample_data_flights/_search
{
  "_source": ["timestamp"],
  "query": {
    "range": {
      "timestamp": {
        "gte": "now-30d+1M"
      }
    }
  }
}

# 엘라스틱 서치는 아래와 같이 6개의 범위 데이터 타입을 제공한다.
# integer_range, long_range, float_range, double_range

# 날짜/시간 범위를 가지는 인덱스
PUT range_test_index
{
  "mappings": {
    "properties": {
      "test_date": {
        "type": "date_range"
      }
    }
  }
}
GET range_test_index/_mapping
GET range_test_index/_search

# date_range 타입의 필드에 date 타입의 데이터를 입력하면 에러가 발생한다.
PUT range_test_index/_doc/1
{
  "test_date": {
    "gte": "2023-10-27"
  }
}

# date_range 타입의 필드에는 "gte", "gt", "lte", "lt" 파라미터를 이용해서 범위를 지정해서 입력해야 한다.
PUT range_test_index/_doc/1
{
  "test_date": {
    "gte": "2023-10-27",
    "lt": "2023-10-31"
  }
}

# 정수 범위 타입을 가지는 인덱스 생성
PUT range_test_index2
{
  "mappings": {
    "properties": {
      "test_integer" : {
        "type": "integer_range"
      }
    }
  }
}

GET range_test_index2/_mapping
GET range_test_index2/_search

# integer_range 타입의 필드에 integer 타입의 데이터를 입력하면 에러가 발생된다.
PUT range_test_index2/_doc/1
{
  "test_integer":10
}

PUT range_test_index2/_doc/1
{
  "test_date" : {
    "gte": 0
  }
}

PUT range_test_index2/_doc/2
{
  "test_date": {
    "gte": 0,
    "lte": 100
  }
}

# bool(논리) query
# bool 쿼리는 복합 쿼리로 위에서 실습해 본 쿼리를 조합해서 사용하고 쿼리를 조합할 수 있도록 4개의 타입(must, must_not, should이 지원된다.

# must 타입
# 쿼리를 실행해서 참인 도큐먼트를 찾는다. 
# 복수 개의 쿼리를 실행하면 AND 연산을 한다.

# 하나의 쿼리를 사용하는 must 타입
# bool 쿼리는 여러 개의 쿼리를 실행할 수 있으므로 실행할 쿼리를 [] 내부에 작성한다.
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {"customer_first_name": "mary"}
        }
      ]
    }
  }
}

# 여러 개의 쿼리를 사용하는 must 타입
# bool 쿼리는 복수 개의 쿼리를 실행할 수 있으므로 [] 내부에 쿼리를 작성한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name", "day_of_week"],
  "query": {
    "bool": {
      "must": [
        {"match": {"customer_first_name": "mary"}},
        {"term": {"day_of_week": "Friday"}},
        {"match": {"category": "Clothing"}}
      ]
    }
  }
}

# must_not 타입
# bool 쿼리 실행 결과에서 제외할 도큐먼트를 찾는 쿼리를 실행한다.
# 즉, must 실행 결과에서 must_not을 뺀 결과가 나온다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "day_of_week", "category"],
  "query": {
    "bool": {
      "must": [
        {"match": {"customer_first_name": "mary"}},
        {"term": {"day_of_week": "Sunday"}},
        {"match": {"category": "Clothing"}}
      ],
      "must_not": [
        {"match": {"customer_last_name": "bailey"}}
      ]
    }
  }
}

# should 타입
# 쿼리를 실행해서 1개 이상 참인 도큐먼트를 찾는다. 
# 1개의 쿼리를 사용하는 should 타입
# should 타입에 쿼리를 한 개만 사용하면 must 타입과 같은 결과를 얻는다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name"],
  "query": {
    "bool": {
      "should":
        {"match": {"customer_first_name": "mary"}}
    }
  }
}

# 복수 개의 쿼리를 사용하는 should 타입
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name"],
  "query": {
    "bool": {
      "should": [
        {"match": {"customer_last_name": "sherman"}},
        {"match": {"customer_last_name": "mccarthy"}}
      ]
    }
  }
}

GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name"]
}

# filter 타입
# filter 타입은 must 타입과 같은 동작을 하지만 유사도 스코어에 영향을 미치지 않는다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["taxful_total_price"],
  "query": {
    "bool": {
      "filter": [
        {
          "range": {"taxful_total_price": {"gte": 25, "lte": 40}}},
          {"term": {"day_of_week": "Friday"}}
      ]
    }
  }
}

GET kibana_sample_data_ecommerce/_search
{
  "_source": ["taxful_total_price", "day_of_week"],
  "query": {
    "bool": {
      "filter": [
        {
          "range": {"taxful_total_price": {"gte": 25, "lte": 40}}}
      ],
      "must_not": [
        {"term": {"day_of_week": "Friday"}}
      ]
    }
  }
}

# 검색을 먼저 실행하고 필터링하면 불필요한 데이터를 검색하게 되므로 필터링을 먼저하고 검색하면 검색 성능을 향상시킬 수 있다.

# 전문 검색을 먼저 실행하고 필터링을 실행한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "day_of_week"],
  "query": {
    "bool": {
      "must": [
        {"match": {"customer_full_name": "mary"}}
      ],
      "filter": [
        {
          "term": {"day_of_week": "Monday"}}
      ]
    }
  }
}

# 필터링을 먼저 실행하고 전문 검색을 실행한다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["day_of_week", "customer_full_name"],
  "query": {
    "bool": {
      "must": {"match": {"customer_full_name": "mary"}},
      "filter": {"term": {"day_of_week": "Sunday"}}
    }
  }
}

# 패턴 검색
# 검색하려는 검색어를 정확히 알지 못하는 경우나 검색어가 너무 길어서 전체를 입력하는 것이 불편할 경우 검색어의 일부분을 알고 있다면 패턴을 이용해서 검색을 할 수 있다.
# 와일드 카드를 이용하는 방법과 정규식을 이용하는 방법이 있다.

# 와일드 카드를 이용하는 패턴 검색 쿼리
# 와일드 카드는 용어를 검색할 때 "*"와 "?"를 사용할 수 있다. 
# "*"은 글자수와 상관없이 모든 문자를 매칭할 수 있고, "?"은 오직 한 문자만 매칭할 수 있다.
# *을 포함한 값을 검색해야 검색이 정상적으로 실행된다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": "customer_full_name",
  "query": {
    "wildcard": {
      "customer_full_name.keyword": {
        "value": "M?ry*"
      }
    }
  }
}

# 정규식 쿼리
GET kibana_sample_data_ecommerce/_search
{
  "_source": "customer_first_name",
  "query": {
    "regexp": {
      "customer_first_name.keyword": {
        "value": "Mar."
      }
    }
  }
}


























